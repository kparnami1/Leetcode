/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int[] inorder; int[] postorder;
    Map<Integer, Integer> hm = new HashMap<>();
    int index= 0;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        this.inorder = inorder;
        this.postorder = postorder;
        this.index= inorder.length-1;
        for (int i=0;i<inorder.length;i++)
            hm.put(inorder[i],i);
        return dfs(0,inorder.length-1);
    }

    private TreeNode dfs(int s , int e) {
        if (s>e)
            return null;
        int currVal = postorder[index--];
        TreeNode curr = new TreeNode(currVal);
        int mid = hm.get(currVal);
        curr.right = dfs(mid+1,e);
        curr.left = dfs(s,mid-1);
        
        return curr;
    }
}
