/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int pathp[];
    int pathq[];
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        return dfs (root,p,q);
        // int i = Math.min(pathp.length, pathq.length); 
        // int prev = 0;
        // for(int j=0;j<i;j++ ) {
        //     if (pathp[j] != pathq[j])
        //         return prev;
        //     prev = pathp[j];
        // }
        
    }
    private TreeNode dfs(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || root.val == p.val || root.val == q.val)
            return root;
        
        TreeNode left = dfs(root.left,p,q);
        TreeNode right = dfs(root.right,p,q);
        if (left==null)
            return right;
        else if (right == null)
            return left;
        else 
            return root;
    
    }
}
